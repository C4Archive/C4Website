title: Dynamic Transform
-
synopsis: This example introduces basic transforms

Currently you can translate and rotate only in 2D using the following methods

<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
translateBy:(NSPoint)p
translateByX:(CGFloat)x andY:(CGFloat)y
rotateByAngle:(CGFloat)angle
]]></script>

Which have to be contained within calls to

<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
[CFATransform begin]
[CFATransform end]
]]></script>

Furthermore, before you end a transform you need to call 
<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
[CFATransform concat]
]]></script>

The concat method can be called many times between begin and end, with differing effects, but essentially takes a stack of transform calls and compresses them into a single transform which has a visible effect, without calling concat you won't see any changes
-
shortsynopsis: introduces basic transforms
-
discussion: This is a further discussion about the example
-
content:<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
#import "CFACanvas.h"

@interface CFACanvas () {}
-(void)drawC:(NSPoint)startingPoint;
-(void)drawFour:(NSPoint)startingPoint;
-(void)drawSquare:(NSPoint)startingPoint;
@end

@implementation CFACanvas
-(void)setup {
    [self drawStyle:DISPLAYRATE];
    [self windowWidth:400 andHeight:320];
    [CFAShape noStroke];
}

-(void)draw {
    [self background:0 alpha:0.066];
    [CFATransform begin];
    [CFATransform translateBy:mousePos];
    [CFATransform rotateByAngle:TWO_PI*mousePos.y/self.canvasHeight];
    [CFATransform concat];
    [self drawC:NSZeroPoint];
    [self drawFour:NSZeroPoint];
    [self drawSquare:NSZeroPoint];
    [CFATransform end];
}

-(void)drawC:(NSPoint)startingPoint {
    [CFAShape fillRed:1.0f green:0.2f blue:0.2f];
    [CFAShape beginShape];
    [CFAShape vertexAtX:startingPoint.x+0 Y:startingPoint.y+0];
    [CFAShape vertexAtX:startingPoint.x+0 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+120];
    [CFAShape vertexAtX:startingPoint.x+40 Y:startingPoint.y+120];
    [CFAShape vertexAtX:startingPoint.x+40 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+0];
    [CFAShape endShape];
}

-(void)drawFour:(NSPoint)startingPoint {
    [CFAShape fillRed:0.2f green:0.4f blue:1.0f];
    [CFAShape beginShape];
    [CFAShape vertexAtX:startingPoint.x+160 Y:startingPoint.y+0];
    [CFAShape vertexAtX:startingPoint.x+160 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+80 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+80 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+80];
    [CFAShape vertexAtX:startingPoint.x+160 Y:startingPoint.y+80];
    [CFAShape vertexAtX:startingPoint.x+160 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+200 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+200 Y:startingPoint.y+80];
    [CFAShape vertexAtX:startingPoint.x+240 Y:startingPoint.y+80];
    [CFAShape vertexAtX:startingPoint.x+240 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+200 Y:startingPoint.y+40];
    [CFAShape vertexAtX:startingPoint.x+200 Y:startingPoint.y+0];
    [CFAShape vertexAtX:startingPoint.x+160 Y:startingPoint.y+0];
    [CFAShape endShape];
}

-(void)drawSquare:(NSPoint)startingPoint {
    [CFAShape fillRed:0.3f green:0.3f blue:0.3f];
    [CFAShape beginShape];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+160];
    [CFAShape vertexAtX:startingPoint.x+120 Y:startingPoint.y+120];
    [CFAShape vertexAtX:startingPoint.x+80 Y:startingPoint.y+120];
    [CFAShape vertexAtX:startingPoint.x+80 Y:startingPoint.y+160];
    [CFAShape endShape];
}

@end]]></script>