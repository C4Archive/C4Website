title: Mouse Tracker
-
synopsis: This example shows how to use the listenFor methods that are part of every CFAObject

Every CFAObject has the ability to listen for custom, or predefined event messages

The current predefined event messages to listen for are: 

<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
FULLSCREEN, KEYPRESSED, MOUSEPRESSED, MOUSERELEASED, 
MOUSEDRAGGED, MOUSEMOVED
]]></script>

This example shows how to create an object which listens for mouse movement and draws itself to the current position of the mouse
-
shortsynopsis: tracks the mouse using a specific listener
-
discussion: This is a further discussion about the example
-
content:<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
////////////////////////////////////////////////////////////////
// The BLUE object
////////////////////////////////////////////////////////////////

@interface MouseTracker : CFAObject {
    CFAColor *blueColor;
    NSPoint currentPosition;
}
-(void)updateCurrentPosition:(NSNotification *)theNotification;
@end

@implementation MouseTracker
- (id)init
{
    self = [super init];
    if (self) {
        blueColor = [[CFAColor colorWithRed:0.2f green:0.4f blue:1.0f] retain];
        [self listenFor:MOUSEMOVED andRunMethod:@"updateCurrentPosition:"];
    }
    return self;
}

- (void)dealloc
{
    [super dealloc];
}

-(void)updateCurrentPosition:(NSNotification *)theNotification {
    currentPosition = [[[theNotification userInfo] objectForKey:@"mouseEvent"] locationInWindow];
}

-(void)draw {
    [CFAShape stroke];
    [CFAShape stroke:0 alpha:0.33];
    [CFAShape fillColor:blueColor];
    [CFAShape rectMode:CENTER];
    [CFAShape circleAt:currentPosition radius:20];
}
@end

////////////////////////////////////////////////////////////////
// The Canvas
////////////////////////////////////////////////////////////////

#import "CFACanvas.h"

MouseTracker *myTracker;

@implementation CFACanvas
-(void)setup {
    [self drawStyle:ANIMATED];
    [self windowWidth:400 andHeight:320];
    myTracker = [[[MouseTracker alloc] init] retain];
}

-(void)draw {
    [self background:0 alpha:0.005];
    [myTracker draw];
}
@end]]></script>