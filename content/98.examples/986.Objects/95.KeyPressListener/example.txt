title: Key Press Listener
-
synopsis: This example shows how to use the listenFor methods that are part of every CFAObject

Every CFAObject has the ability to listen for custom, or predefined event messages

The current predefined event messages to listen for are: 

<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
FULLSCREEN, KEYPRESSED, MOUSEPRESSED, MOUSERELEASED, 
MOUSEDRAGGED, MOUSEMOVED
]]></script>

This example shows how to create an object which listens for key presses and draws itself randomly to the canvas
-
shortsynopsis: shows how to listen for key presses
-
discussion: This is a further discussion about the example
-
content:<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
////////////////////////////////////////////////////////////////
// The RED object
////////////////////////////////////////////////////////////////

@interface NotificationListener : CFAObject {
    CFAColor *redColor;
    NSPoint currentPosition;
}
-(void)setRandomPosition;
@end

@implementation NotificationListener
- (id)init
{
    self = [super init];
    if (self) {
        redColor = [[CFAColor colorWithRed:1.0f green:0.2f blue:0.2f] retain];
        [self setRandomPosition];
    }
    return self;
}

- (void)dealloc
{
    [super dealloc];
}

-(void)draw {
    [CFAShape noStroke];
    [CFAShape fillColor:redColor];
    [CFAShape rectMode:CENTER];
    [CFAShape rectAt:currentPosition size:NSMakeSize(30, 30)];
}

-(void)setRandomPosition {
    currentPosition = NSMakePoint([CFAMath randomInt:400], [CFAMath randomInt:320]);
}
@end

////////////////////////////////////////////////////////////////
// The Canvas
////////////////////////////////////////////////////////////////

#import "CFACanvas.h"

NotificationListener *myListener;

@implementation CFACanvas
-(void)setup {
    [self drawStyle:DISPLAYRATE];
    [self windowWidth:400 andHeight:320];
    myListener = [[[NotificationListener alloc] init] retain];
    [myListener listenFor:KEYPRESSED andRunMethod:@"setRandomPosition"];
}

-(void)draw {
    [self background:0 alpha:0.01];
    [myListener draw];
}

-(void)mousePressed {
    [self redraw];
}
@end]]></script>