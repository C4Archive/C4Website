title: Object Update
-
synopsis: This example shows how to use the update methods that are part of every CFAObject

Every CFAObject has the ability to update itself automatically, either by frame or by time

The methods you can use to update are:

<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
updateAutomaticallyUsingFrames:
]]></script>
and 
<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
updateAutomaticallyUsingSeconds:
]]></script>

You can call either method from within the object itself, or call the method on the object from the canvas

In the code below, the blue object updates every frame and the red object updates every 1/4 of a second

<b>Notice that neither object's update method is called from the canvas</b>
-
shortsynopsis: shows how to automatically update objects
-
discussion: This is a further discussion about the example
-
content:<script type="syntaxhighlighter" class="brush: objc"><![CDATA[
////////////////////////////////////////////////////////////////
// The BLUE object
////////////////////////////////////////////////////////////////

@interface BlueObject : CFAObject {
    int count;
    CFAColor *blueFill;
    NSPoint currentPosition;
}
@end

@implementation BlueObject

- (id)init
{
    self = [super init];
    if (self) {
        count = 0;
        blueFill = [[CFAColor colorWithRed:0.2f green:0.4f blue:1.0f] retain];
        currentPosition = NSMakePoint(0, -10);
    }
    return self;
}

- (void)dealloc
{
    [super dealloc];
}

-(void)update {
    currentPosition.y++;
    if(currentPosition.y >= 320) currentPosition.y = -10;
}

-(void)draw {
    [CFAShape noStroke];
    [CFAShape fillColor:blueFill];
    [CFAShape rectAt:currentPosition size:NSMakeSize(400, 10)];
}
@end

////////////////////////////////////////////////////////////////
// The RED object
////////////////////////////////////////////////////////////////

@interface RedObject : CFAObject {
    int count;
    CFAColor *redFill;
    NSPoint currentPosition;
}
@end

@implementation RedObject

- (id)init
{
    self = [super init];
    if (self) {
        count = 0;
        redFill = [[CFAColor colorWithRed:1.0f green:0.2f blue:0.2f] retain];
        currentPosition = NSMakePoint(0, -10);
    }
    return self;
}

- (void)dealloc
{
    [super dealloc];
}

-(void)update {
    currentPosition.y++;
    if(currentPosition.y >= 320) currentPosition.y = -10;
}

-(void)draw {
    [CFAShape noStroke];
    [CFAShape fillColor:redFill];
    [CFAShape rectAt:currentPosition size:NSMakeSize(400, 10)];
}
@end

////////////////////////////////////////////////////////////////
// The CANVAS
////////////////////////////////////////////////////////////////

#import "CFACanvas.h"

BlueObject  *blueObj;
RedObject   *redObj;

@implementation CFACanvas
-(void)setup {
    [self drawStyle:DISPLAYRATE];
    [self windowWidth:400 andHeight:320];
    blueObj = [[[BlueObject alloc] init] retain];
    [blueObj updateAutomaticallyUsingFrames:1];
    
    redObj = [[[RedObject alloc] init] retain];
    [redObj updateAutomaticallyUsingSeconds:0.25];
}

-(void)draw {
    [self background:0 alpha:0.01];
    [blueObj draw];
    [redObj draw];
}
@end]]></script>